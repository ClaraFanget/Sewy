{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nconst {\n  height,\n  width\n} = Dimensions.get('window');\nconst CURRENT_RESOLUTION = Math.sqrt(height * height + width * width);\nexport const PREDEF_RES = {\n  iphoneX: {\n    px: {\n      width: 1125,\n      height: 2436\n    },\n    dp: {\n      width: 375,\n      height: 812\n    }\n  },\n  iphone8P: {\n    px: {\n      width: 1080,\n      height: 1920\n    },\n    dp: {\n      width: 414,\n      height: 736\n    }\n  },\n  iphone8: {\n    px: {\n      width: 750,\n      height: 1334\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphone7P: {\n    px: {\n      width: 1080,\n      height: 1920\n    },\n    dp: {\n      width: 414,\n      height: 736\n    }\n  },\n  iphone6sP: {\n    px: {\n      width: 1080,\n      height: 1920\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphone6P: {\n    px: {\n      width: 1080,\n      height: 1920\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphone7: {\n    px: {\n      width: 750,\n      height: 1334\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphone6s: {\n    px: {\n      width: 750,\n      height: 1334\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphone6: {\n    px: {\n      width: 750,\n      height: 1334\n    },\n    dp: {\n      width: 375,\n      height: 667\n    }\n  },\n  iphoneSE: {\n    px: {\n      width: 640,\n      height: 1136\n    },\n    dp: {\n      width: 320,\n      height: 568\n    }\n  }\n};\nexport const create = (designSize = {\n  width: 414,\n  height: 736\n}) => {\n  if (!designSize || !designSize.width || !designSize.height || typeof designSize.width !== 'number' || typeof designSize.height !== 'number') {\n    throw new Error('react-native-pixel-perfect | create function | Invalid design size object! must have width and height fields of type Number.');\n  }\n  const DESIGN_RESOLUTION = Math.sqrt(designSize.height * designSize.height + designSize.width * designSize.width);\n  const RESOLUTIONS_PROPORTION = CURRENT_RESOLUTION / DESIGN_RESOLUTION;\n  return size => RESOLUTIONS_PROPORTION * size;\n};","map":{"version":3,"names":["height","width","Dimensions","get","CURRENT_RESOLUTION","Math","sqrt","PREDEF_RES","iphoneX","px","dp","iphone8P","iphone8","iphone7P","iphone6sP","iphone6P","iphone7","iphone6s","iphone6","iphoneSE","create","designSize","Error","DESIGN_RESOLUTION","RESOLUTIONS_PROPORTION","size"],"sources":["/Users/clara/Desktop/Sewy/SewyCode/node_modules/react-native-pixel-perfect/index.js"],"sourcesContent":["import { Dimensions } from 'react-native'\nconst { height, width } = Dimensions.get('window')\nconst CURRENT_RESOLUTION = Math.sqrt(height * height + width * width)\nexport const PREDEF_RES = {\n    iphoneX: {\n        px: {\n            width: 1125,\n            height: 2436\n        },\n        dp: {\n            width: 375,\n            height: 812\n        }\n    },\n    iphone8P: {\n        px: {\n            width: 1080,\n            height: 1920\n        },\n        dp: {\n            width: 414,\n            height: 736\n        }\n    },\n    iphone8: {\n        px: {\n            width: 750,\n            height: 1334\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphone7P: {\n        px: {\n            width: 1080,\n            height: 1920\n        },\n        dp: {\n            width: 414,\n            height: 736\n        }\n    },\n    iphone6sP: {\n        px: {\n            width: 1080,\n            height: 1920\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphone6P: {\n        px: {\n            width: 1080,\n            height: 1920\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphone7: {\n        px: {\n            width: 750,\n            height: 1334\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphone6s: {\n        px: {\n            width: 750,\n            height: 1334\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphone6: {\n        px: {\n            width: 750,\n            height: 1334\n        },\n        dp: {\n            width: 375,\n            height: 667\n        }\n    },\n    iphoneSE: {\n        px: {\n            width: 640,\n            height: 1136\n        },\n        dp: {\n            width: 320,\n            height: 568\n        }\n    }\n}\nexport const create = (designSize = { width: 414, height: 736 }) => {\n    if (!designSize || !designSize.width || !designSize.height || typeof designSize.width !== 'number' || typeof designSize.height !== 'number') {\n        throw new Error('react-native-pixel-perfect | create function | Invalid design size object! must have width and height fields of type Number.')\n    }\n    const DESIGN_RESOLUTION = Math.sqrt(designSize.height * designSize.height + designSize.width * designSize.width)\n    const RESOLUTIONS_PROPORTION = CURRENT_RESOLUTION / DESIGN_RESOLUTION\n    return size => RESOLUTIONS_PROPORTION * size\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}